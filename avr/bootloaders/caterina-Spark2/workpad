V					1
2180004001A			11
YYWWMM00000			11
					23 bytes

reserve 32 bytes

15 bytes left over

7FCD

'g' = 0x67

intel hex format

[Colon]	[Data Size]	[Start Address] [Record Type]	[Data] 								[Checksum]
[:]		[10]		[0000]			[00]			[0C9434000C944F000C944F000C944F00]	[4F]



[:]		[10]		[7FCD]			[00]			[FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF]	[B4]
[:]		[07]		[7FDD]			[00]			[FFFFFFFFFFFFFF]					[A4]


[:]		[10]		[7FF2]			[00]			[006B00000018034A0044004C00750063]	[47]

[:]		[06]		[7F7E]			[00]			[006B0000000000000000000000000000]	[92]


:107FCD00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB4
:107FDD00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA4
:00000001FF


:00000001FF



2  1  8  0  0  4  0  0  1  A

32 31 38 30 30 34 30 30 31 41

32313830303430303141





218-0004-001-A

32 31 38 2d 30 30 34 2d 30 30 31 2d 41 FF FF FF


201850ELC00001

32 31 38 35 30 45 4c 43 30 30 30 30 31 FF FF FF

atprogram -t avrdragon -i isp -d atmega32u4 write -fl -o 0x7FE0 --values 3231382d3030342d3030312d41FFFFFF

Generate above string for each serial number


// 218-0004-001-A
3231382D303030342D3030312D41FFFF

// 2019

>>> pad = 'FFFF'
>>> serial = '%s%05d' %(base,200)
>>> serial
'201901ELC00200'
>>> serial_hex = ''.join(format(ord(c)) for c in test)
>>> serial_hex
'5048495748496976674848504848'
>>> part = '218-0004-001-A'
>>> part_hex = ''.join(format(ord(c)) for c in part)
>>> config_hex = serial_hex.join(pad, part_hex, pad)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: join() takes exactly one argument (3 given)
>>> config_hex = serial_hex.join((pad, part_hex, pad))
>>> config_hex
'FFFF504849574849697667484850484850495645484848524548484945655048495748496976674
848504848FFFF'
>>> len(config_hex)
92
>>> len(serial_hex)
28
>>> len(part_hex)
28
>>> len(pad_
... )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pad_' is not defined
>>> len(pad)
4
>>> 28+4+28+4
64
>>> config_hex = ''.join((serial_hex, pad, part_hex, pad))
>>> len(config_hex)
64
>>>

>>> seperator = ','
>>> data = (serial, part, config_hex)
>>> print(seperator.join(data))
201901ELC00200,218-0004-001-A,5048495748496976674848504848FFFF5049564548484852
4848494565FFFF
>>>

sep = ','
pad = 'FFFF'
base = '201901ELC'
part = '218-0004-001-A'
part_hex = ''.join(format(ord(c)) for c in part)
sn_start = 1
sn_end = 200

for x in range(sn_start, sn_end):
	serial = '%s%05d' %(base, x)
	serial_hex = ''.join(format(ord(c)) for c in serial)
	config_hex = ''.join((serial_hex, pad, part_hex, pad))
	csv_row_data = (serial, part, config_hex)
	print(seperator.join(csv_row_data))


